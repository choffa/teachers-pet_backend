/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.8.0'
        classpath 'org.codehaus.groovy:groovy-backports-compat23:2.4.6'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'mysql:mysql-connector-java:5.1.41'
    compile 'org.mockito:mockito-all:2.0.2-beta'
    runtime 'mysql:mysql-connector-java:5.1.41'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    compile 'junit:junit:4.12'
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

shadowJar {
    baseName 'Server'
}

task deploy {
    doLast {
        remotes {
            pvv {
                host = 'doktor.pvv.org'
                user = System.console().readLine('> username: ').toString()
                password = System.console().readPassword('> password: ').toString()
            }
        }
        ssh.run {
            settings {
                knownHosts = allowAnyHosts
            }

            session(remotes.pvv) {
                put from: file('build/libs/Server-all.jar'), into: '.'
                //put from: file('build/distributions/teachers-pet_backend.zip'), into: '.'
                def res = execute 'ls -a'
                if (!res.contains('tp')){
                    execute 'mkdir tp'
                }
                //execute 'rm -rf ./tp/*'
                execute 'mv Server-all.jar tp/'
                //execute 'unzip -o -j tp/teachers-pet_backend.zip -d tp/'
                //execute 'A'
            }
        }
    }
}

build.dependsOn(shadowJar)

mainClassName = 'backend.ServerMain'
